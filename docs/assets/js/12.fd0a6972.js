(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{435:function(_,v,t){"use strict";t.r(v);var e=t(34),a=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[_._v("#")]),_._v(" 介绍")]),_._v(" "),t("h2",{attrs:{id:"satum-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#satum-简介"}},[_._v("#")]),_._v(" Satum 简介")]),_._v(" "),t("p",[_._v("Satum，中文可发音为『萨图』，是一款面向多实例集成、功能可插拔的微前端框架。旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。")]),_._v(" "),t("p",[_._v("目前实践在平头哥 occ 业务，即"),t("a",{attrs:{href:"https://occ.t-head.cn/",target:"_blank",rel:"noopener noreferrer"}},[_._v("平头哥芯片开放社区"),t("OutboundLink")],1),_._v("。该内核框架本身不具备"),t("em",[_._v("沙箱、路由协调、代码处理、缓存等")]),_._v("功能，可以使用官方提供的中间件，也可以自行实现。")]),_._v(" "),t("h2",{attrs:{id:"关于-satum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于-satum"}},[_._v("#")]),_._v(" 关于 Satum")]),_._v(" "),t("p",[_._v("在 "),t("code",[_._v("Satum")]),_._v(" 之前，业界已经实现了一些开源的微前端框架，比较流行的："),t("code",[_._v("single-spa")]),_._v(" 和 "),t("code",[_._v("qiankun")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("single-spa")]),_._v(" 称得上是微前端的开山鼻祖，它通过监听 url change 事件，在路由发生变化时，按照配置好的匹配规则激活子应用，进而渲染到页面上。这个思路也是目前实现微前端的主流方式。另外，它要求子应用需要暴露四个方法："),t("code",[_._v("bootstrap")]),_._v("、"),t("code",[_._v("mount")]),_._v("、"),t("code",[_._v("unmount")]),_._v("、"),t("code",[_._v("update")]),_._v("(该方法可选)，分别对应初始化、渲染、卸载和更新，这也意味着如果某个应用要集成进微前端需要对入口文件进行修改和适配。因为 "),t("code",[_._v("qiankun")]),_._v(" 是基于 "),t("code",[_._v("single-spa")]),_._v(" 做了进一步封装，所以这些特点也被 "),t("code",[_._v("qiankun")]),_._v(" “继承”下来，而 "),t("code",[_._v("qiankun")]),_._v(" 也依赖 "),t("code",[_._v("umijs")]),_._v("/"),t("code",[_._v("webpack")]),_._v(" 一些配置。")]),_._v(" "),t("p",[t("code",[_._v("single-spa")]),_._v("/"),t("code",[_._v("qiankun")]),_._v(" 面向的是"),t("strong",[_._v("单实例模式")]),_._v("的微前端场景，即一个 url 下只能激活一个子应用(虽然 qiankun 也支持了所谓的多应用激活，但明确表示"),t("a",{attrs:{href:"https://qiankun.umijs.org/zh/faq/#%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E6%BF%80%E6%B4%BB%E4%B8%A4%E4%B8%AA%E5%BE%AE%E5%BA%94%E7%94%A8%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"}},[_._v("不能同时显示多个依赖于路由的微应用"),t("OutboundLink")],1),_._v(")。"),t("code",[_._v("Satum")]),_._v(" 并没有沿用 "),t("code",[_._v("single-spa")]),_._v(" 的思路，但是兼容 "),t("code",[_._v("single-spa")]),_._v("/"),t("code",[_._v("qiankun")]),_._v(" 的配置。")]),_._v(" "),t("p",[t("code",[_._v("Satum")]),_._v(" 旨在解决"),t("strong",[_._v("多实例模式")]),_._v("的微前端场景，内置了多个微应用被同时激活时，该如何"),t("strong",[_._v("协调加/卸载、数据依赖、组件共享及渲染顺序")]),_._v("。而且它支持中间件&插件机制，可以很方便自定义沙箱、路由协调、缓存等。通过不同的中间件&插件组合，可以"),t("strong",[_._v("定制")]),_._v("适合自己团队的"),t("strong",[_._v("微前端架构体系")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("Satum")]),_._v(" 支持"),t("strong",[_._v("定制多种形态")]),_._v("的微前端框架，所以沙箱如果是基于 webComponents 实现，可以是标签式的。如果是基于 Proxy 实现的沙箱，可以是配置式的。当然基于 iframe 实现的沙箱，也能轻松支持 "),t("code",[_._v("Vite")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"satum-的优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#satum-的优势"}},[_._v("#")]),_._v(" Satum 的优势")]),_._v(" "),t("ul",[t("li",[_._v("微内核。稳定性强，专注于多个微应用的协调。")]),_._v(" "),t("li",[_._v("使用简单。已有应用无需适配代码，即可集成。")]),_._v(" "),t("li",[_._v("兼容所有的框架，甚至是 purejs 应用。")]),_._v(" "),t("li",[_._v("支持多终端场景，同一个 url 下不同终端可激活不同的应用。")]),_._v(" "),t("li",[_._v("支持中间件&插件机制，方便定制特殊场景的微前端框架。")])])])}),[],!1,null,null,null);v.default=a.exports}}]);